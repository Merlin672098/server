'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var request = require('got');

/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
/* global Reflect, Promise */













function __awaiter(thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator.throw(value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
}

function __generator(thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
}

/**
 * OneSignal server URL
 */
var SERVER_URL = "https://onesignal.com";

/**
 * OneSignal API base URL
 */
var BASE_URL = SERVER_URL + "/api/v1";

/**
 * Constants definitions
 */

var URL = BASE_URL + "/notifications";
/**
 * Send notification to users
 *
 * @export
 * @param {string} secretKey REST API key
 * @param {INotification} notification The notification to send
 * @returns {Promise<object>}
 */
function sendNotification(secretKey, notification) {
    return __awaiter(this, void 0, void 0, function () {
        var response, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, request.post(URL, {
                            body: notification,
                            json: true,
                            headers: {
                                Authorization: "Basic " + secretKey
                            }
                        })];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.body];
                case 2:
                    error_1 = _a.sent();
                    throw error_1;
                case 3: return [2 /*return*/];
            }
        });
    });
}

var URL$1 = BASE_URL + "/notifications";
/**
 * Stop a scheduled or currently outgoing notification
 *
 * @export
 * @param {string} secretKey REST API key
 * @param {string} appId Application identifier
 * @param {string} notificationId Notification identifier
 * @returns {Promise<object>}
 */
function cancelNotification(secretKey, appId, notificationId) {
    return __awaiter(this, void 0, void 0, function () {
        var response, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, request.delete(URL$1 + "/" + notificationId + "?app_id=" + appId, {
                            json: true,
                            headers: {
                                Authorization: "Basic " + secretKey
                            }
                        })];
                case 1:
                    response = _a.sent();
                    return [2 /*return*/, response.body];
                case 2:
                    error_1 = _a.sent();
                    throw error_1;
                case 3: return [2 /*return*/];
            }
        });
    });
}

/**
 * API methods
 */

/**
 * OneSignal Rest API wrapper
 *
 * @export
 * @param {string} appId Application identifier
 * @param {string} secretKey REST API key
 * @returns {IRestApi}
 */
function oneSignalApi(appId, secretKey) {
    if (!appId) {
        throw new TypeError("An application identifier is required");
    }
    if (!secretKey) {
        throw new TypeError("A secret API key is required");
    }
    return {
        sendNotification: function (notification) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, sendNotification(secretKey, Object.assign(notification, { app_id: appId }))];
                });
            });
        },
        cancelNotification: cancelNotification.bind(null, secretKey, appId)
    };
}

exports.oneSignalApi = oneSignalApi;
//# sourceMappingURL=index.js.map
