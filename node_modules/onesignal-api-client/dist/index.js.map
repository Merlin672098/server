{"version":3,"file":"index.js","sources":["../lib/values/SERVER_URL.ts","../lib/values/BASE_URL.ts","../lib/values/index.ts","../lib/api/sendNotification.ts","../lib/api/cancelNotification.ts","../lib/api/index.ts","../lib/Client.ts"],"sourcesContent":["/**\n * OneSignal server URL\n */\nexport const SERVER_URL: string = \"https://onesignal.com\";\n","/**\n * OneSignal API base URL\n */\nimport { SERVER_URL } from \"values/SERVER_URL\";\n\nexport const BASE_URL: string = `${SERVER_URL}/api/v1`;\n","/**\n * Constants definitions\n */\nexport * from \"values/BASE_URL\";\nexport * from \"values/SERVER_URL\";\n","import * as request from \"got\";\n\nimport {\n  INotificationDevicesStrict as INotificationDevices,\n  INotificationFiltersStrict as INotificationFilters,\n  INotificationSegmentsStrict as INotificationSegments\n} from \"interfaces/notification\";\nimport { BASE_URL } from \"values\";\n\nconst URL: string = `${BASE_URL}/notifications`;\n\n/**\n * Send notification to users\n *\n * @export\n * @param {string} secretKey REST API key\n * @param {INotification} notification The notification to send\n * @returns {Promise<object>}\n */\nexport async function sendNotification(\n  secretKey: string,\n  notification:\n    | INotificationSegments\n    | INotificationFilters\n    | INotificationDevices\n): Promise<object> {\n  try {\n    const response: { body: object } = await request.post(URL, {\n      body: notification,\n      json: true,\n      headers: {\n        Authorization: `Basic ${secretKey}`\n      }\n    });\n\n    return response.body;\n  } catch (error) {\n    throw error;\n  }\n}\n","import * as request from \"got\";\n\nimport { BASE_URL } from \"values\";\n\nconst URL: string = `${BASE_URL}/notifications`;\n\n/**\n * Stop a scheduled or currently outgoing notification\n *\n * @export\n * @param {string} secretKey REST API key\n * @param {string} appId Application identifier\n * @param {string} notificationId Notification identifier\n * @returns {Promise<object>}\n */\nexport async function cancelNotification(\n  secretKey: string,\n  appId: string,\n  notificationId: string\n): Promise<object> {\n  try {\n    const response: {\n      body: object;\n    } = await request.delete(`${URL}/${notificationId}?app_id=${appId}`, {\n      json: true,\n      headers: {\n        Authorization: `Basic ${secretKey}`\n      }\n    });\n\n    return response.body;\n  } catch (error) {\n    throw error;\n  }\n}\n","/**\n * API methods\n */\nexport * from \"api/sendNotification\";\nexport * from \"api/cancelNotification\";\n","import { cancelNotification, sendNotification } from \"api\";\nimport {\n  INotificationDevices,\n  INotificationFilters,\n  INotificationSegments\n} from \"interfaces/notification\";\n\n/**\n * Closure for One Signal API\n *\n * @export\n * @interface IOneSignalApi\n */\nexport interface IOneSignalApi {\n  (appId: string, secretKey: string);\n}\n\n/**\n * OneSignal REST API methods\n *\n * @export\n * @interface IRestApi\n */\nexport interface IRestApi {\n  /**\n   * Send notification to users\n   *\n   * @param {INotification} notification The notification to send\n   * @returns {Promise<object>}\n   * @memberof IRestApi\n   */\n  sendNotification(\n    notification:\n      | INotificationDevices\n      | INotificationFilters\n      | INotificationSegments\n  ): Promise<object>;\n  /**\n   * Stop a scheduled or currently outgoing notification\n   *\n   * @param {string} notificationId Notification identifier\n   * @returns {Promise<object>}\n   * @memberof IRestApi\n   */\n  cancelNotification(notificationId: string): Promise<object>;\n}\n\n/**\n * OneSignal Rest API wrapper\n *\n * @export\n * @param {string} appId Application identifier\n * @param {string} secretKey REST API key\n * @returns {IRestApi}\n */\nexport function oneSignalApi(appId: string, secretKey: string): IRestApi {\n  if (!appId) {\n    throw new TypeError(\"An application identifier is required\");\n  }\n  if (!secretKey) {\n    throw new TypeError(\"A secret API key is required\");\n  }\n\n  return {\n    async sendNotification(\n      notification:\n        | INotificationDevices\n        | INotificationFilters\n        | INotificationSegments\n    ): Promise<object> {\n      return sendNotification(\n        secretKey,\n        Object.assign(notification, { app_id: appId })\n      );\n    },\n    cancelNotification: cancelNotification.bind(null, secretKey, appId)\n  };\n}\n"],"names":["request.post","URL","request.delete"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA,AAAO,IAAM,UAAU,GAAW,uBAAuB;;ACHzD;;;AAGA,AAEO,IAAM,QAAQ,GAAc,UAAU,YAAS;;ACLtD;;GAEG;;ACOH,IAAM,GAAG,GAAc,QAAQ,mBAAgB,CAAC;;;;;;;;;AAUhD,0BACE,SAAiB,EACjB,YAGwB;;;;;;;oBAGa,qBAAMA,YAAY,CAAC,GAAG,EAAE;4BACzD,IAAI,EAAE,YAAY;4BAClB,IAAI,EAAE,IAAI;4BACV,OAAO,EAAE;gCACP,aAAa,EAAE,WAAS,SAAW;6BACpC;yBACF,CAAC,EAAA;;oBANI,QAAQ,GAAqB,SAMjC;oBAEF,sBAAO,QAAQ,CAAC,IAAI,EAAC;;;oBAErB,MAAM,OAAK,CAAC;;;;;CAEf;;ACnCD,IAAMC,KAAG,GAAc,QAAQ,mBAAgB,CAAC;;;;;;;;;;AAWhD,4BACE,SAAiB,EACjB,KAAa,EACb,cAAsB;;;;;;;oBAKhB,qBAAMC,cAAc,CAAID,KAAG,SAAI,cAAc,gBAAW,KAAO,EAAE;4BACnE,IAAI,EAAE,IAAI;4BACV,OAAO,EAAE;gCACP,aAAa,EAAE,WAAS,SAAW;6BACpC;yBACF,CAAC,EAAA;;oBAPI,QAAQ,GAEV,SAKF;oBAEF,sBAAO,QAAQ,CAAC,IAAI,EAAC;;;oBAErB,MAAM,OAAK,CAAC;;;;;CAEf;;AClCD;;GAEG;;AC6CH;;;;;;;;AAQA,sBAA6B,KAAa,EAAE,SAAiB;IAC3D,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,SAAS,CAAC,uCAAuC,CAAC,CAAC;KAC9D;IACD,IAAI,CAAC,SAAS,EAAE;QACd,MAAM,IAAI,SAAS,CAAC,8BAA8B,CAAC,CAAC;KACrD;IAED,OAAO;QACC,gBAAgB,EAAtB,UACE,YAGyB;;;oBAEzB,sBAAO,gBAAgB,CACrB,SAAS,EACT,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAC/C,EAAC;;;SACH;QACD,kBAAkB,EAAE,kBAAkB,CAAC,IAAI,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,CAAC;KACpE,CAAC;CACH;;;;"}